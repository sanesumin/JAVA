2.즉, 인스턴스 필드와 인스턴스 메소드는 객체에 소속된 멤버
이기 때문에 객체없이는 사용할수 없다.
	예)public class Car{
		//필드
		int gas;
		
		//메소드
		void setSpeed(int speed){
			...
			}
		}
		*멤버접근방법:먼저 Car객체(인스턴스)를 생성하고 참조변수로 접근.
			Car myCar = new Car(); //참조변수 myCar
			myCar.gas = 10;
			myCar.setSpeed(60);
			Car yourCar = new Car(); //참조변수 yourCar
			yourCar.gas = 20;
			yourCar.setSpeed(80);
3.this는 객체 자신을 말한다.
주로 생성자와 메소드의 매개변수 이름이 필드와 동일한 경우,
인스턴스 멤버인 필드임을 명시하고자 할때 사용한다.
=======================
<정적멤버와 static>에 대하여
1.정적멤버는 클래스에 고정된 멤버로서 객체를 생성하지 않고 사용할 수 있는
필드와 메소드를 말한다.
2.이것을 정적 필드, 정적 메소드라고 한다.
*참고로 정적 멤버는 객체(인스턴스)에 소속된 멤버가 아니라,클래스에 소속된 멤버
이기때문에 클래스멤버라고도 한다.
---------------------------------------
[[정적 멤버 선언]]
------------------------------------
*필드와 메소드를 선언할 때 static키워드를 추가적으로 붙여준다.
예시)
	public class 클래스이름{
		//정적필드
		static 타입 필드 [=초기값];
		
		//정적메소드
		static 리턴타입 메소드(매개변수 선언...){...}
		}
		
*인스턴스 필드와 정적 필드 작성의 판단 기준
객체마다 가지고 있어야 할 데이터라면 인스턴스필드로 선언해주고,
객체마다 가지고 있을 필요성이 없는 공용적인 데이터라면 정적 필드로 선언하는 것이 좋다.		
	예)
		public class Calculator{
			String color;//계산기별로 색깔을 지니고 있는것이 좋으므로
							 //인스턴스 필드로 만드는것이 적당.
							 
			void setColor(String color){this.color = color;}//인스턴스 메소드
			static double pi = 3.1458; //정적필드인데 객체마다 변하지 않는값.
			static int plus(int x, int y){return x + y;}
			static int minus(int x, int y){return x-y;}
				//인스턴스 멤버를 접근하는 것이 아닌 외부로부터 매개변수값을
				//받으므로 static으로 정적메소드를 만들었다.
			}
-----------------
정적 멤버 사용법
-----------------
클래스.필드;
클래스.메소드(매개값,...);
예시) public class Calculator{
			static double pi = 3.14;
			static int plus(int x, int y){...}
			static int minus(int x, int y){...}
			}
			
			사용할 때:
				double result1 = 10 * 10 * Calculator.pi;
				int result2 = Calculator.plus(10,5);
				int result3 = Calclator.minus(10,5);
		But,정적 필드와 정적 메소드는 원칙적으로 클래스 이름으로
		접근해야하지만 다음과 같이 객체를 만들어 참조변수로도 접근이 가능하다.
		이유:인스턴스 멤버보다 정적 멤버의 생명주기가 길기 때문에 상관없다.
		예시)Calculator myCalcu = new Calculator();
				double result1 = 10*10*myCalc.pi;
				int result2 = myCalcu.plus(10,5);
				int result3 = myCalcu.minus(10,5);















