p191~192
p193~
=========================================
6.4)<객체 생성과 클래스 변수>에 관하여
-----------------------------------------
1. 클래스를 작성하고 컴파일을 했으면 객체를 생성할 수 있는 설계도가 만들어진것임.
2. ***클래스로부터 객체를 생성하는 방법은"new"연산자를 사용하면 됨!!!
	new 클래스 (): (p194)--> 힙(heap)메모리 영역에 생성
	1) new연산자 뒤에는 생성자가 옴, 생성자는 클래스() 형태를 가짐.
	2) 클래스는 참조타입이라서 생성된 객체의 주소를 리턴하도록 되어있음.
	   방법: 클래스 변수;
	   	   변수 = new 클래스();
	   	   또는,
	   	   클래스 변수 = new 클래스();
 	3)역서 변수는 객체를 참조하게 된다.
=======================================
6.5)<클래스의 구성 멤버>에  관하여
---------------------------------------

1.클래스에는 필드(Field), 생성자(Constructor),메소드(Method)가 있음.
	*특징: 이 구성멤버들은 생략 되거나, 복수 개가 작성될 수 있다.
	1)필드: 객체의 고유 데이터, 부품 객체, 상태 정보를 저장하는 곳.
		*형태는 변수(Variable)와 비슷하지만 필드를 변수라고 하지 않음.
		비교) 변수는 생성자와 메소드 안에서 사용되다가 생성자나 메소드가 실행종료시
		자동 소멸 하지만,필드는 생성자와 메소드 전체에서 사용되고 객체가 소멸 되지 않는 한
		객체와 함께 존재한다.
	2)생성자: new연산자로 호출되는 특별한 중괄호{} 블록이다.
		-생성자의 역할은 객체 생성시 초기화를 담당한다.
		-필드를 초기화하거나, 메소드를 호출해서 객체를 사용할 준비를 함
		-생성자는 메소드와 형태가 비슷하지만, 리턴 타입이 없고
		이름이 클래스 이름과 동일하다.
	3)메소드: 객체의 동작에 해당하는 중괄호{} 블록을 의미함
		-이 중괄호 블록의 이름을 메소드 이름이라고 함.
		-메소드를 호출하면 모든 코드가 일괄적으로 실행됨
		-메소드는 필드를 읽고 쓴다.
		-다른 객체를 생성해서 다양한 기능을 수행한다.
		-매개변수와 리턴값으로 객체간에 데이터 전달의 수단으로 사용됨.
=================================================
6.6)<필드>에 대하여(p198)
-----------------------------------------------
1.정의: 필드(Field)는 객체의 고유 데이터, 객체의 현재 상태데이터,
	객체가 가져야할 부품을 저장하는 곳.
	예) 자동차 객체: 제작회사, 모델, 색깔, 최고속도(고유 데이터)
				현재 속도, 엔진 회전 수(상태 데이터)
				차체, 엔진, 타이어(부품)
				=======> 이 정보들이 자동차 클래스에 필드로 선언되어야함.
				
2.필드 선언
	1) 클래스 중괄호{} 블록 어디서든 존재 할수 있음.
		즉, 생성자 선언과 메소드 선언의 앞의 뒤 어떤 곳에서도 필드 선언이 가능
		but, 생성자와 메소드 중괄호 블록 내부에는 선언 될 수 없음.
		=====> 이것은 모두 로컬 변수로 취급됨
	2) 필드를 클래스 멤버 변수라고도 하지만, 되도록 필드라고 쓰기를 권장.
		타입 필드 [ = 초기값 ];
		타입으로 올수 있는것: 기본타입(byte,short,int,long,float,double,boolean),
		참조타입(배열,클래스,인터페이스)
	3) 필드의 초기값은 필드 선언 시 주어질수도 있고, 생략될수도 있다.
	p199: 대개 0이나 0.0 false null 로 자동 초기화된다.
3.필드사용
	1) 필드값을 읽고 수정할 수 있다.
	2) 클래스 내부의 생성자나 메소드 내에서는 필드에 바로 접근할 수 있지만
	 클래스 외부에서 사용할 경우


























