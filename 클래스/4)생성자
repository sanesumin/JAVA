1.생성자(Constructor): new연산자와 같이 사용되어 클래스로부터
객체를 생성할대 호출되어 객체의 초기화를 담당함.
*객체 초기화란? 필드를 초기화하거나, 메소드를 호출해서
객체를 사용할 준비를 하는 것이다.
2. 생성자를 통하지 않고서는 객체를 절대 생성할 수 없다.
3. 생성자로 객체가 힙 메모리 영역에 만들어지면 그 주소값을 리턴하는데
만약 여기서예외(에러)가 발생하면 객체는 생성되지 않음.
4.기본생성자(*): Default Constructor
	만약 생성자 없다면, 컴파일러는 기본생성자를 만들어 바이트 코드(.class)
	에 자동으로 추가시킴.
5. 형식
	[public] 클래스(){
	//클래스가 public class인 경우 기본생성자에도 public이 붙는다.
	//그러나 그렇지 않으면 생성자에도 public을 생략함.
	}
6.클래스 생성자가 없는 경우 디폴트 생성자는 있기 때문에 다음과 같이 할 수 있음
 Car myCar = new Car();
 				//기본생성자
7.명시적으로 선언한 생성자가 하나라도 있으면 
컴파일러는 기본생성자를 자동 추가하지 않는다.

======================================
<생성자 선언>에 관하여(p204)
--------------------------------------






3.기본 생성자가 없고, 매개변수가 있는 생성자가 정의된 경우,
실행 클래스에서 객체를 만들대 기본생성자를 사용할 수 없다.
===========>그러나, 기본생성자를 정의해주면 사용 가능하다.
=========================================
<필드 초기화>===> 생성자에서 실행(p206~)
-----------------------------------------
1)필드를 선언할때 초기값을 주는 방법, 생성자에게 초기값을 주는 방법
두가지가 있음
	실습) "대한민국"의 경우 전자, name과ssn은 후자의 방법을 사용하고 있음.
2)매개변수와 필드이름이 동일한 경우 처리방법
	: 매개변수가 생성자내에서 우선순위가 높다.
	따라서 필드명 앞에 this. 을 붙여준다.
	==>this.필드는  this 라는 참조변수로 필드를 사용하는 것과 동일
	this는 객체 자신의 참조를 말함.
============================================
<생성자 오버로딩>=======>Overloading(p208)
1.다양한 방법으로 객체를 생성할 수 있도록, 생성자 오버로딩을 사용하는데
이것은 매개 변수를 달리하는 생성자를 여러개 선언하는 것이다.
2. 예시)
	public class Car{
	 Car(){..}
	 Car(String model){..}
	 Car(String model,String color){..}
	 Car(String model,String color,int maxSpeed){..}
	 } //매개변수가 다른 다양한 생성자
3. 주의점:매개 변수의 타입과 갯수, 선언된 순서가 같을때는 변수명이 다르더라도 같은 변수명으로 본다.
	









































