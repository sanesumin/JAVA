1. 실체 클래스들의 공통적인 특성(필드, 메소드)을 뽑아내어
추상클래스로 만드는 이유
	1)실체 클래스를 공통된 필드와 메소드 이름으로 통일
	-소유자의 명칭 같은 경우 owner라고 정한 클래스, 
	user라고 정한 클래스 그리고 메소드의 경우 powerOn(),
	turnOn()등의 식별자가 다를 수가 있는데  추상클래스에서 
	이를 상속해주어 하나로 통일할 수 있음
	2) 실체 클래스를 작성시 시간을 절약
	- 같은 필드와 메소드는 추상클래스에서 선언,
	상속 받으면 시간을 절약
2. 필요성: 설계자와 코더가 서로 다른 경우가 많은데
	이때 추상클래스로 설계규격을 만들어주면 이를 상속하여
	구체화시켜주기만 하면 된다.
3.추상클래스의 선언
	abstract라는 키워드를 클래스 선언시 붙여준다.
	(단, 이렇게 하면 new연산자를 이용하여 객체를 만들 수 없지만,
	상속을 통해 자식 클래스를 만들어 호출가능
	public abstract class클래스{
	//필드
	//생성자
	//메소드
	}
	-추상클래스도 필드, 생성자, 메소드 선언을 할 수 있음
	-자식 객체 생성시 super(..)를 호출해서 추상클래스
	객체를 간접 생성할 수 있기 때문에 추상 클래스도 
	생성자가 있어야함
	-예시에서 Phone객체가 생성 될 수 없기 때문에
	SmartPhone객체를 생성해서 Phone의 메소드인 turnOn(),turnOff()
	메소드를 사용할 수 있다.
	(SmartPhone은 Phone의 자식 클래스)
4. 추상메소드(추상메소드의 오버라이딩)
	-필수이다.
	-1) 실행내용이 동일한 경우 추상클래스에 메소드 하나로 작성
	-2)메소드 선언만 통일화하고 실행내용은 달라야 하는 경우
		예시] 어떤 소리를 내도록 하는데 sound() 메소드를 실체에서
		작성하도록 하면 잊어버리고 작성하지 않는 경우를 방지함.
5. 추상메소드의 선언
	[public|protected] abstract 리턴타입 메소드명(매개변수,...);
	차이점: abstract(추상적인 이란 키워드)가 붙어 있고
	메소드의 중괄호{}가 없다.
	예시 ] public abstract class Animal{
				public abstract void sound();
			}
			*TIP:추상메소드가 하나라도 있는 경우 그 클래스도
					abstract를 붙여주고 이것 역시 추상클래스가
					됨을 기억하자.
			--> 어떤 소리를 낼지 모르지만, sound()를 추상메소드로
			선언하고 Animal클래스를 상속하는 하위 크래스는 고유한 소리를
			내도록 sound()메소드를 재정의
			(Dog는 "멍멍",Cat은"야옹" 소리를 내도록 Dog,Cat
			클래스에서 sound메소드를 재정의)
			===> 즉, 추상메소드는 반드시 구현되어야한다.	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
