1.현실세계에서의 모든 현상을 객체간의 상호작용이다.-->객체지향의 기본가정
  예) 사람과 전자계산기: 사람은 전자계산기의 덧셈을 누른다.
  	-->전자계산기는 계산결과를 사람에게 보여준다.
2. P188: 객체의 상호작용은 객체간의 메소드(더하기) 호출을 의미하고,
  매개값(1,2)과 리턴값(3)을 통해서 데이터를 주고 받는다.
 ======================================
 <객체간의 관계>에 대하여
 --------------------------------------
 1.객체는 개별적으로도 사용되지만, 대부분 다른객체와 상호 관계를 한다.
 2. 관계성의 종류는
   1)집합관계: 객체는 하나의 부품이고, 하나는 완성품이다.
       예) 자동차는 엔진, 타이어, 핸들 등으로 구성되므로 자동차와 이 부품들은 집합의 관계이다.
       (조립하면 자동차가 된다.)
   2)사용관계(Use):객체가 다른 객체의 메소드를 호출하여 원하는 결과를 얻음.
     예)사람은 자동차를 사용한다.(달린다, 멈춘다 등의 메소드를 호출)
   3)상속관계**: 상위(부모) 객체를 기반으로 하위(자식)객체를 생성하는 관계
    예) 일반적으로 상위 객체는 종류를 의미, 하위 객체는 구체적인 사물
    --> 자동차는 기계의 한 종류이다.(기계: 상위객체, 자동차: 하위객체)
   가 있다.
 3. 객체 지향 모델링에 있어서 관계의 관점은?
   객체를 모델링하고, 집합관계에 있는 부품 객체와 사용관계에 있는 객체를
   하나씩 설계한 후에 조립하는 방식으로 프로그램을 개발하는 기법이 객체지향 
   모델링 기법이다.
  =========================================
  <객체 지향 프로그래밍의 특징>이란 무엇인가?
  -----------------------------------------
  1)캡슐화(Encapsulation): 객체의 필드, 메소드를 하나로 묶고 실제
    구현 내용을 감추는것(information hiding)-->private등을 사용
    *캡슐화의 이유: 외부의 잘못된 사용으로 객체가 오염되거나 정보가 파괴되는 것을 막는다.
    *방법: 접근 제한자(Access Modifier)를 사용하여 목적을 달성.
     접근 제한자란? 객체의 필드와 메소드의 사용범위를 제한함으로써
     외부로부터 이를 보호함.(private과 함께 getter(),setter()사용)
  2)상속(Inheritance)
    -상위 객체를 재사용하여 하위 객체를 쉽고 빨리 설계할 수 있도록 도와줌.
    (개발시간 절약)
    -이미 잘 개발된 객체를 재사용해서, 새로운 객체를 만들므로 반복적인 코드의 중복을 줄여줌.
    (효율적)
    -유지 보수 시간을 최소화해줌.
    예) 객체 B,C가 객체 A를 상속할 경우, B,C를 따로따로 수정하지 않아도
      객체 A만 수정하면 두 객체에 바로 반영된다.
  3)다형성(Polymorphism)
    -같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질
    -즉, 코드 츨면에서는 하나의 타입에 여러 객체를 대입함으로써
    다양한 기능을 이용할 수 있도록 함.
    *자바는 다형성이 이루어질 수 있도록, 부모클래스 또는 인터페이스의 타입변환을 허용함.
    (부모 타입에는 모든 자식객체가 대입될 수 있음,인터페이스 타입에는 모든 구현 객체가 대입될 수 있음.)
    예) 자동차를 설계시 인터페이스 타입을 적용했다면,
     이 인터페이스를 구현 한 실제 타이어들은 어떤 것이든 장착(대입)이 가능
  	
  *위의 나열한 특징은 자바 언어를 학습하면 자연스럽게 습득됨.