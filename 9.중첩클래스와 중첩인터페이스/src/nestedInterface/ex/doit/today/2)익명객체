1. 익명(anonymous)객체는 이름이 없는 객체를 말한다.
2. 익명 객체는 단독으로 생성할 수 없고, 클래스를 상속하거나
인터페이스를 구현해야만 생성할 수 있다.
3. 익명 객체는 필드의 초기값이나 로컬 변수의 초기값,
	또는 매개 변수의 매개값으로 주로 대입된다.
4. UI이벤트 처리 객체나 스레드 객체를 간편하게 생성할 목적으로
	익명객체가 많이 활용된다.
5. 익명 자식 객체의 생성
	class Child extends Parent{  }
	class A{
		Parent field = new Child();
		void method(){
			Parent localVar = new Child();
		}
	}
	1)익명 객체의 필요성: 자식 클래스가 재사용 되지 않고
	오로지 해당 필드와 변수의 초기값으로만 사용될 경우
	즉, 일회성일 경우 익명 자식 객체를 생성, 대입하는
	방법이 더 효율적이다.
	2) 익명 자식 객체 생성시 유의점: 주의할 점은 이것은
	하나의 실행문으로 되기 때문에 문장의 끝에 반드시 세미콜론(;)
	을 붙여 주어야한다.
		예시2) 
		부모클래스 [필드|변수] = new 부모클래스(매개값,...){
		//필드
		//메소드
		};
	3) 익명자식객체는 생성자를 선언할 수 없다--> 자신이 바로
	생성자이기 때문에...즉,선언과 동시에 생성되기 때문임.
	예시3-1)
		class A{
			Parent field = new Parent(	){
				int childField;
				void childMethod(){}
				@Override
				void parentMethod(){}
			};
		}
	예시3-2)
		class A{
			void method(	){
				Parent localVar = new Parent(){
				 int childField;
				 void childMethod(){}
				 @Override
				 void parentMethod(){}
				 };
				}
		}
	예시3-3)
		class A{
			void method1(Parent parent){}
			
			void method2(){
				method1(
				
				new Parent(){
					int childField;
					void childMethod(){}
					@Override
					void parentMethod(){}
				}
			);
		}
	}
	예시4)	
	
	class A{
			Parent field = new Parent(	){
				int childField;
				void childMethod(){}
				@Override
				void parentMethod(){}
			};
		}
		
		void method(){
			field.childField = 3; (x)
	
	
	
	
	
	