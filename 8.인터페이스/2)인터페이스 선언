* 인터페이스는"`~.java"형태의 소스파일로 작성되고
	컴파일러(javac.exe)를 통해"~.class"형태로 컴파일 되기 때문에
	물리적 형태는 클래스와 동일.(선언방법만 상이함)
	
(p345) 1. 인터페이스 선언
		[public] interface 인터페이스명{...}
-인터페이스의 이름은 클래스 이름을 작성하는 방법과 동일
 	*영어 대소문자 구분, 첫문자 대문자 , public은 다른패키지 접근 가능
 	예) public interface RemoteControl{}
 	비교) 클래스는 필드, 생성자, 메소드를 구성멤버로 가짐
 			인터페이스는 상수와(추상)메소드를 구성멤버로 가짐
 			자바 8부터는 디폴트 메소드와 정적 메소드도 선언 가능
 			interface 인터페이스명{
 			//상수
 			타입 상수명 = 값;
 			//추상 메소드
 			타입 메소드명(매개변수,...);
 			//디폴트 메소드
 			default 타입 메소드명 (매개변수,...){...}
 			//정적 메소드
 			static 타입 메소드명(매개변수,...){..}
 			}
 			
 			
1) 상수필드(Constant Field)
	인터페이스는 설계도이기 때문에 런타입때 데이터를 보유
	할수 없지만 상수 필드는 가질 수 있다.
	상수는 반드시 초기값을 주고 선언해야 한다.
	
	-인터페이스는 데이터를 저장할 수 없다.
	따라서 인스턴스 필드나 정적 필드를 선언 불가
	
	-상수 선언은 가능
		[public static final] 타입 상수명 = 값;
		[]안의 키워드를 생략하더라도 자동적으로 컴파일 과정에서 붙게됨.
		
	-상수명 규칙:대문자로 작성,여러 단어일때 언더바(_)로 연결
	예)MODEL,MAX_VALUE와 같이 선언
	
	-인터페이스 상수는 static{}와 같은 정적블록에서 초기화
	할수 없기 때문에 반드시 선언과 동시에 초기화를 해야한다.
	
	public interface RemoteControl{
		public int MAX_VOLUME = 10;
		public int MIN_VOLUME = 0;
	}
2) 추상메소드(Abstract Method)
	객체가 가지고 있는 메소드를 설명한 것으로, 호출할때
	어떤 매개값이 필요하고, 리턴타입이 무엇인지 알려줌.
	실제 실행부는 구현 객체가 가지고 있음(오버라이딩)
	
	-추상메소드: 리턴타입, 메소드명, 매개변수만 기술되고
	중괄호{}는 붙이지 않는 메소드를 말함.
	
	-public abstract를 생략하더라도 자동적으로 컴파일 과정에서 붙게됨.
	-리턴타입이 void이고 turnOn(), turnOff()메소드는 호출시
	매개값이 필요없고, setVolume()메소드만 int매개값이 필요함을 알려줌
	public interface RemoteControl{
	//상수
	public int MAX_VOLUME =  10;
	public int MIN_VOLUME = 0;
	
	//추상메소드
	public void turnOn(); //중괄호 {}가 없이 선언부만
	public void turnOff(); //작성 --->추상메소드
	public void setVolume(int volume);
	}
	
3) 디폴트 메소드(Default Method)

	인터페이스에 선언되지만 사실은 구현 객체가
	가지고 있는 인스턴스 메소드라고 생각해야함
	이것은 기존 인터페이스를 확장해서 새로운 기능을 추가하기 위함이다.
	앞에 반드시 default라고 붙여야함
	
	
	-자바 8에서 추가된 인터페이스의 새로운 멤버 
	형태는 클래스의 인스턴스 메소드와 동일한데 default키워드가
	리턴 타입 앞에 붙음, 항상 public이다.
	(즉, public이 생략되도 자동적으로 컴파일과정에서 붙게된다.)

	[public] default 리턴타입 메소드명(매개변수,...){..}
	-무음처리기능을 제공하는 setMute() 디폴트 메소드 선언
	//디폴트 메소드
	default void setMute(boolean mute){
		if(mute){
			System.out.println("무음 처리합니다.");
		}else{
			System.out.println("무음 해제합니다.");
		}
	}
4) 정적 메소드(static Method)
	역시 자바8이 있어야 실행시킬 수 있고, 디폴트 메소드와는 달리
	객체가 없어도 인터페이스만으로 호출이 가능
	-자바 8에서 추가된 인터페이스의 새로운 멤버
	-형태는 클래스의 정적 메소드와 완전히 동일함.
	-항상 public이라서 생략 가능
	
	[public] static 리턴타입 메소드명(매개변수,...){...}
	
	
