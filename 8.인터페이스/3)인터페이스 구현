*객체는 인터페이스에서 정의된 추상메소드와 동일한
메소드 이름, 매개 타입, 리턴 타입을 가진 실체 메소드를
 가지고 있어야 한다. ==> 이러한 객체를 인터페이스 구현 객체
 									(interface implement object) 라고 하고
 									, 구현객체를 생성하는 클래스를 구현 클래스라고 한다.
 [구현클래스 선언]
 	public class 구현클래스명 implements 인터페이스명{
 	//인터페이스에 선언된 추상 메소드의 실체 메소드 선언
 	//(클래스로 말하면 메소드 재정의/오버라이드)
 	}
 	
(p353)구현 클래스 구현시 인터페이스의 모든 메소드는
	public 접근 제한을 갖으므로 더 강하게 접근 제한을
	걸면 안된다. ==>"Cannot reduce the visibility of
	the inherited method"라는 컴파일 오류 발생
	(public --> private)
3.실제 메소드가 없는 경우 구현 클래스는 추상클래스가 
되어서 클래스 선언부에 abstract 키워드를 추가해야한다.
public abstract class Television implements
RemoteControl{
public void turnOn(){..}
public void turnOff(){..}
//setVolume() 실체메소드가 없다.
//그러니가 일부만 구현된 경우
4.구현클래스가 구현되면 , new연산자로 객체를 생성하여
인터페이스 변수를 선언하고, 거기에 구현객체를 대입한다.
RemoteControl rc;
rc = new Television();
rc = new Audio();
비교) Television tv = new Television(); (x)
선언) 인터페이스 변수;
		변수 = 구현객체;
		또는
		인터페이스 변수 = 구현객체;
	*즉, 구현객체를 인터페이스 변수에 대입하여 사용한다.
5. 때로는, 일회성의 구현 객체를 만들기 위해
소스파일을 만들고 클래스를 선언하는 것이 비효율적이다.	
 ==> 자바는 소스파일을 만들지 않고도 구현객체를 만들수 
 있는 방법을 제공, 그것은 바로<익명 구현 객체>이다.
 6.익명구현객체의 용도: UI프로그래밍에서 이벤트를 처리하기
 위해 그리고 임시 작업 스레드를 만들기 위해 익명 구현
 객체를 사용를 만들기 대문에 용도가 유용하다.
 
 7.익명구현객체의 선언:
 	인터페이스 변수 = new 인터페이스(){
 		//인터페이스에 선언된 추상 메소드의 실체 메소드 선언
 		}; //세미콜론 붙여야한다.이유:하나의 실행문임;
 		- 분석:
 		(1) new연산자 뒤에는 클래스이름이 와야하지만
 		이름이 없다. 
 		
 		(2) 인터페이스(){}는 인터페이스를 구현한다.
 		
 		(3) new연산자는 이렇게 선언된 클래스를 객체로 생성한다.
 		
 		(4) 중괄호{} 에는 인터페이스에 선언된 모든 추상메소드들이
 		실체메소드로 작성되어야 하고 아닐시는 컴파일 에러가 발생.
 		
 		(5) 여기서 쓰인 필드와 메소드는 익명 객체 안에서만 사용가능
		public class RemoteControlExample{
			public static void main(String[] args){
				RemoteControl rc = new RemoteControl(){
					public void turnOn(){}
					public void turnOff(){}
					public void setVolume(){}
				}; //한문장이기 때문에 세미코론을 해준다.
			}
		}		
	
	
	
	
	
	
	
	
	
	
	
	